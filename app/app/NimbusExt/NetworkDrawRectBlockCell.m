//
// Created by djzhang on 4/16/15.
// Copyright (c) 2015 Nimbus. All rights reserved.
//

#import <sys/ucred.h>

#import "NimbusModels.h"
#import "NetworkDrawRectBlockCell.h"
#import "NIAttributedLabel.h"
#import "VideoInfoObject.h"


@implementation NetworkDrawRectBlockCell {
    UIFont *_font;
}


- (id)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier {
    if((self = [super initWithStyle:style reuseIdentifier:reuseIdentifier])) {

        self.descriptionLabel = [[NIAttributedLabel alloc] init];

        [self makeLabel:self.descriptionLabel];

        [self.blockView addSubview:_descriptionLabel];
    }
    return self;
}


- (void)makeLabel:(NIAttributedLabel *)label {
    label.numberOfLines = 0;
    label.lineBreakMode = NSLineBreakByWordWrapping;
//    label.autoresizingMask = UIViewAutoresizingFlexibleDimensions;
//    label.frame = CGRectInset(self.view.bounds, 20, 20);
    _font = [NetworkDrawRectBlockCell getRectBlockCellFont];
    label.font = _font;

    // When the user taps a link we can change the way the link text looks.
    label.attributesForHighlightedLink = @{NSForegroundColorAttributeName : RGBCOLOR(255, 0, 0)};

    // In order to handle the events generated by the user tapping a link we must implement the
    // delegate.
//    label.delegate = self;

    // By default the label will not automatically detect links. Turning this on will cause the label
    // to pass through the text with an NSDataDetector, highlighting any detected URLs.
    label.autoDetectLinks = YES;

    // By default links do not have underlines and this is generally accepted as the standard on iOS.
    // If, however, you do wish to show underlines, you can enable them like so:
    label.linksHaveUnderlines = YES;

//    label.text =
//            @"A screen on the dash flickers and displays an artist's rendition of the planet."
//                    // We can use \n characters to separate lines of text.
//                    @"\nSigned beneath the image: tenach.deviantart.com";

//    NSRange linkRange = [label.text rangeOfString:@"an artist's rendition of the planet"];
//
//    // Explicitly adds a link at a given range.
//    [label addLink:[NSURL URLWithString:@"http://th04.deviantart.net/fs71/300W/f/2010/145/c/9/Planet_Concept_1_by_Tenach.jpg"]
//             range:linkRange];
}

+ (UIFont *)getRectBlockCellFont {
    return [UIFont fontWithName:@"AmericanTypewriter" size:15];
}


- (void)prepareForReuse {
    [super prepareForReuse];

    // This resets the networkImageView's .image to the initial image (in this case nil). Oftentimes
    // the initial image will be a local "empty" avatar image that you've provided with your
    // application.
}

- (BOOL)shouldUpdateCellWithObject:(NIDrawRectBlockCellObject *)object {
    [super shouldUpdateCellWithObject:object];

    VideoInfoObject *infoObject = object.object;

    self.descriptionLabel.text = infoObject.descriptionString;

//    CGFloat blockCellHeight = [NetworkDrawRectBlockCell getBlockCellVisibleHeight:infoObject withWidth:self.blockView.frame.size.width];
//    CGRect rect = CGRectMake(20, 20, self.blockView.frame.size.width - 40, self.blockView.frame.size.height);
    self.descriptionLabel.frame = infoObject.showRect;

    [self.descriptionLabel sizeToFit];
    [self.descriptionLabel setNeedsLayout];
    [self.descriptionLabel setNeedsDisplay];

    return YES;
}


+ (CGFloat)getBlockCellHeight:(VideoInfoObject *)object withWidth:(CGFloat)width {
    CGRect textRect1 = [object.descriptionString boundingRectWithSize:CGSizeMake(width - 40, CGFLOAT_MAX)
                                             options:(NSStringDrawingUsesLineFragmentOrigin|NSStringDrawingUsesFontLeading)
                                          attributes:@{NSFontAttributeName:[NetworkDrawRectBlockCell getRectBlockCellFont]}
                                             context:nil];
    

    return textRect1.size.height;
}

@end



