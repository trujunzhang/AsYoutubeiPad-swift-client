//
//  VideoInfoDrawRectBlockCell.swift
//  app
//
//  Created by djzhang on 4/19/15.
//  Copyright (c) 2015 djzhang. All rights reserved.
//

import Foundation
import UIKit
import Cartography

class VideoInfoDrawRectBlockCell: NIDrawRectBlockCell {

    var descriptionLabel: NIAttributedLabel?
    var titleContainer: UIView?
    var titleLabel: UILabel?
    var likeCountLabel: UILabel?
    var toggleButton: UIButton?

    var group: Cartography.ConstraintGroup = Cartography.ConstraintGroup()

    var _font: UIFont?

    // MARK : static functions
    class func getDescriptionBlockCellFont() -> UIFont {
        return UIFont(name: "AmericanTypewriter", size: 12)!
    }

    class func getBlockCellHeight(object: VideoInfoObject, width: CGFloat) -> CGFloat {
        let boundingRect = object.descriptionString.boundingRectWithSize(CGSizeMake(width, CGFloat.max),
                options: .UsesLineFragmentOrigin | .UsesFontLeading,
                attributes: [NSFontAttributeName: VideoInfoDrawRectBlockCell.getDescriptionBlockCellFont()],
                context: nil)

        let cellHeight = boundingRect.size.height + 20
        return cellHeight
    }

    // MARK : Life Cycle
    override init(style: UITableViewCellStyle, reuseIdentifier: String?) {
        super.init(style: style, reuseIdentifier: reuseIdentifier)

        // line01
        titleContainer = UIView()
        titleLabel = UILabel()
        likeCountLabel = UILabel()
        toggleButton = UIButton()
        if let _titleContainer: UIView = titleContainer, _titleLabel: UILabel = titleLabel, _likeCountLabel: UILabel = likeCountLabel, _toggleButton: UIButton = toggleButton {
            makeTitlePanel()

            // 1
            self.blockView.addSubview(_titleContainer)
            // 2
            _titleContainer.addSubview(_titleLabel)
            _titleContainer.addSubview(_likeCountLabel)
            _titleContainer.addSubview(_toggleButton)
        }

        // line02
        descriptionLabel = NIAttributedLabel()
        if let _descriptionLabel: NIAttributedLabel = descriptionLabel {
            makeDescriptionLabel(_descriptionLabel)
            self.blockView.addSubview(_descriptionLabel)
        }

        if let _titleContainer: UIView = titleContainer, _descriptionLabel: NIAttributedLabel = descriptionLabel {
            layout(_titleContainer) {
                view1 in

                view1.leading == view1.superview!.leading
                view1.trailing == view1.superview!.trailing

                view1.top == view1.superview!.top
                view1.height == VIDEO_INFO_TITLE_PANEL_HEIGHT

            }
            group = layout(_descriptionLabel) {
                view2 in

                view2.leading == view2.superview!.leading + 20
                view2.trailing == view2.superview!.trailing - 20

                view2.top == view2.superview!.leading + VIDEO_INFO_TITLE_PANEL_HEIGHT
                view2.height == 100
            }
        }


        LayoutTitlePanel()
    }

    required init(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
    }

    override func prepareForReuse() {

    }

    override func shouldUpdateCellWithObject(object: AnyObject!) -> Bool {
        super.shouldUpdateCellWithObject(object)

        let infoObject: VideoInfoObject = object.object as! VideoInfoObject
        let currentRowHeight:CGFloat = infoObject.currentRowHeight

        if let _descriptionLabel: NIAttributedLabel = descriptionLabel, _titleLabel: UILabel = titleLabel, _likeCountLabel: UILabel = likeCountLabel, _toggleButton: UIButton = toggleButton {
            _descriptionLabel.text = infoObject.descriptionString
            _titleLabel.text = infoObject.title
            _likeCountLabel.text = infoObject.likeCount

            group = layout(_descriptionLabel,replace: group) {
                view2 in

                view2.leading == view2.superview!.leading + 20
                view2.trailing == view2.superview!.trailing - 20

                view2.top == view2.superview!.leading + VIDEO_INFO_TITLE_PANEL_HEIGHT
                view2.height == currentRowHeight
            }
        }

        return true
    }

    func makeDescriptionLabel(label: NIAttributedLabel) {
        label.numberOfLines = 0
        //        label.lineBreakMode = NSLineBreakByWordWrapping
        label.font = VideoInfoDrawRectBlockCell.getDescriptionBlockCellFont()

        // When the user taps a link we can change the way the link text looks.
        label.attributesForHighlightedLink = [NSForegroundColorAttributeName: UIColor.redColor()]

        // In order to handle the events generated by the user tapping a link we must implement the
        // delegate.
        //    label.delegate = self;

        // By default the label will not automatically detect links. Turning this on will cause the label
        // to pass through the text with an NSDataDetector, highlighting any detected URLs.
        label.autoDetectLinks = true

        // By default links do not have underlines and this is generally accepted as the standard on iOS.
        // If, however, you do wish to show underlines, you can enable them like so:
        label.linksHaveUnderlines = true
    }

    func makeTitlePanel() {
//        VIDEO_INFO_TITLE_PANEL_HEIGHT

//        titleLabel = UILabel()
//        likeCountLabel = UILabel()
//        toggleButton = UIButton()


    }

    func LayoutTitlePanel() {
        if let _titleLabel: UILabel = titleLabel, _likeCountLabel: UILabel = likeCountLabel, _toggleButton: UIButton = toggleButton {
            layout(_titleLabel, _likeCountLabel, _toggleButton) {
                view1, view2, view3 in

                view1.leading == view1.superview!.leading + 20
                view1.trailing == view1.superview!.trailing - 60

                view1.top == view1.superview!.top + 10
                view1.height == 14

                view2.leading == view2.superview!.leading + 20
                view2.trailing == view2.superview!.trailing - 60

                view2.top == view1.bottom + 4
                view2.height == 14
            }
        }
    }


}